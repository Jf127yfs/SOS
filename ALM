<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Team Analytics - Wall Display</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    :root {
      --magenta: #E91E63;
      --purple: #9C27B0;
      --gold: #FFB74D;
      --pink: #FF4081;
      --cream: #FFF8E1;
      --dark-bg: #0d0d0d;
      --card-bg: rgba(26, 26, 26, 0.95);
      --shadow: rgba(0, 0, 0, 0.7);
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      background: linear-gradient(135deg, #1a0a1a 0%, #0d0d0d 50%, #1a0a1a 100%);
      font-family: 'Courier New', monospace;
      color: var(--cream);
      overflow: hidden;
      min-height: 100vh;
    }

    /* Screen Fuzz Effect */
    @keyframes fuzz {
      0%, 100% {
        opacity: 0.05;
        filter: brightness(1);
      }
      25% {
        opacity: 0.1;
        filter: brightness(1.05);
      }
      50% {
        opacity: 0.15;
        filter: brightness(0.95);
      }
      75% {
        opacity: 0.08;
        filter: brightness(1.02);
      }
    }

    @keyframes flicker {
      0%, 100% { opacity: 1; }
      5% { opacity: 0.9; }
      10% { opacity: 1; }
      15% { opacity: 0.85; }
      20% { opacity: 1; }
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: repeating-linear-gradient(
        0deg,
        rgba(255, 255, 255, 0.03) 0px,
        rgba(255, 255, 255, 0.03) 1px,
        transparent 1px,
        transparent 2px
      );
      animation: fuzz 0.15s infinite, flicker 5s infinite;
      pointer-events: none;
      z-index: 9999;
    }

    /* Header */
    .header {
      text-align: center;
      padding: 15px;
      background: var(--card-bg);
      border-bottom: 4px solid var(--magenta);
      box-shadow: 0 4px 20px var(--shadow);
    }

    .header h1 {
      font-size: 28px;
      font-weight: 700;
      color: var(--magenta);
      letter-spacing: 5px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.8), 0 0 40px rgba(233, 30, 99, 0.5);
      margin-bottom: 8px;
    }

    .header .subtitle {
      font-size: 12px;
      color: var(--gold);
      letter-spacing: 3px;
      font-weight: 300;
    }

    /* Status Bar */
    .nav-bar {
      background: rgba(0, 0, 0, 0.9);
      border-bottom: 2px solid var(--purple);
      padding: 12px 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 30px;
    }

    .nav-info {
      color: var(--gold);
      font-size: 13px;
      font-weight: bold;
      letter-spacing: 1px;
    }

    /* Main Container */
    .main-container {
      display: grid;
      grid-template-columns: 220px 1fr 280px;
      gap: 0;
      height: calc(100vh - 120px);
    }

    /* Left Panel: Team Rankings */
    .left-panel {
      background: var(--card-bg);
      border-right: 2px solid var(--gold);
      padding: 15px;
      overflow-y: auto;
      overflow-x: hidden;
    }

    .rankings-section {
      margin-bottom: 20px;
    }

    .rankings-title {
      font-size: 11px;
      color: var(--gold);
      margin-bottom: 10px;
      padding-bottom: 5px;
      border-bottom: 2px solid var(--gold);
      font-weight: bold;
    }

    .rank-item {
      background: rgba(156, 39, 176, 0.1);
      border: 2px solid var(--purple);
      border-radius: 8px;
      padding: 8px;
      margin-bottom: 8px;
      font-size: 10px;
      transition: all 0.3s ease;
    }

    .rank-item.active {
      border-color: var(--magenta);
      background: rgba(233, 30, 99, 0.2);
      transform: scale(1.05);
    }

    .rank-team-name {
      color: var(--cream);
      font-weight: bold;
      margin-bottom: 3px;
    }

    .rank-score {
      color: var(--gold);
      font-size: 12px;
      font-weight: bold;
    }

    /* Center: Wall Canvas */
    .wall-container {
      position: relative;
      background: #000;
    }

    #wallCanvas {
      width: 100%;
      height: 100%;
      background: #000;
    }

    .guest-cards-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }

    .guest-card {
      position: absolute;
      background: rgba(0, 50, 0, 0.9);
      border: 2px solid #00ff00;
      padding: 6px 10px;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
      font-size: 11px;
      z-index: 100;
      pointer-events: auto;
    }

    .guest-card.team-member {
      border-color: var(--magenta);
      box-shadow: 0 0 15px rgba(233, 30, 99, 0.8);
    }

    .guest-uid {
      font-size: 12px;
      font-weight: bold;
      color: #00ffff;
      margin-bottom: 3px;
    }

    .guest-screen-name {
      font-size: 9px;
      color: #00ff00;
    }

    /* Right Panel: Abby */
    .right-panel {
      background: var(--card-bg);
      border-left: 2px solid var(--gold);
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .abby-angry {
      width: 100%;
      max-width: 240px;
      border: 4px solid #ff0000;
      border-radius: 15px;
      margin-bottom: 20px;
      box-shadow: 0 0 30px rgba(255, 0, 0, 0.6);
    }

    .abby-message {
      font-size: 16px;
      color: #ff0000;
      font-weight: bold;
      line-height: 1.6;
      text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
      margin-bottom: 20px;
    }

    .current-team-info {
      width: 100%;
      background: rgba(233, 30, 99, 0.1);
      border: 2px solid var(--magenta);
      border-radius: 10px;
      padding: 15px;
      margin-top: 20px;
    }

    .current-team-name {
      font-size: 18px;
      color: var(--gold);
      font-weight: bold;
      margin-bottom: 10px;
    }

    .current-team-category {
      font-size: 12px;
      color: var(--cream);
      margin-bottom: 5px;
    }

    .current-team-score {
      font-size: 24px;
      color: var(--magenta);
      font-weight: bold;
    }

    /* Crash Out Effect */
    .crash-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: #000;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .crash-overlay::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: repeating-linear-gradient(
        0deg,
        rgba(255, 255, 255, 0.03) 0px,
        rgba(255, 255, 255, 0.03) 1px,
        transparent 1px,
        transparent 2px
      );
      animation: scan 0.3s linear infinite;
      pointer-events: none;
      z-index: 1;
    }

    .crash-overlay::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(18, 16, 16, 0.1);
      opacity: 0;
      animation: fuzz 0.1s infinite;
      pointer-events: none;
      z-index: 2;
    }

    @keyframes scan {
      0% { transform: translateY(0); }
      100% { transform: translateY(10px); }
    }

    .crash-message {
      color: var(--magenta);
      font-size: 48px;
      font-weight: bold;
      text-align: center;
      margin-bottom: 30px;
      text-shadow: 0 0 30px rgba(233, 30, 99, 0.8);
      animation: pulse 1s infinite, glitch 0.5s infinite;
      position: relative;
      z-index: 10;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }

    @keyframes glitch {
      0%, 100% { text-shadow: 0 0 30px rgba(233, 30, 99, 0.8); }
      25% { text-shadow: -2px 0 30px rgba(233, 30, 99, 0.8), 2px 0 30px rgba(99, 30, 233, 0.8); }
      50% { text-shadow: 2px 0 30px rgba(233, 30, 99, 0.8), -2px 0 30px rgba(99, 30, 233, 0.8); }
      75% { text-shadow: 0 -2px 30px rgba(233, 30, 99, 0.8), 0 2px 30px rgba(99, 30, 233, 0.8); }
    }

    .crash-video {
      width: 560px;
      height: 315px;
      border: 5px solid var(--magenta);
      border-radius: 20px;
      margin-bottom: 20px;
      overflow: hidden;
      position: relative;
      z-index: 10;
      box-shadow: 0 0 50px rgba(233, 30, 99, 0.5);
    }

    .crash-video iframe {
      width: 100%;
      height: 100%;
    }

    .crash-subtext {
      color: var(--cream);
      font-size: 24px;
      text-align: center;
      opacity: 0.9;
      position: relative;
      z-index: 10;
      text-shadow: 0 0 10px rgba(255, 248, 225, 0.5);
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <h1>üé≠ TEAM ANALYTICS - WALL DISPLAY üé≠</h1>
    <div class="subtitle">// MATCHMAKING ANALYSIS SYSTEM //</div>
  </div>

  <!-- Status Bar -->
  <div class="nav-bar">
    <div class="nav-info">
      <span id="teamCounter">Team 0 of 15</span>
    </div>
    <div class="nav-info">
      <span id="dancerCount">0 Dancers</span>
    </div>
    <div class="nav-info">
      <span id="categoryDisplay">Initializing...</span>
    </div>
  </div>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Left Panel: Rankings -->
    <div class="left-panel">
      <div class="rankings-section">
        <div class="rankings-title">üèÜ TOP MATCHES (4)</div>
        <div id="topRankings"></div>
      </div>

      <div class="rankings-section">
        <div class="rankings-title">‚öôÔ∏è NEEDS WORK (4)</div>
        <div id="needsWorkRankings"></div>
      </div>

      <div class="rankings-section">
        <div class="rankings-title">‚ö†Ô∏è NOT GREAT (4)</div>
        <div id="notGreatRankings"></div>
      </div>

      <div class="rankings-section">
        <div class="rankings-title">üí• WORST (3)</div>
        <div id="worstRankings"></div>
      </div>
    </div>

    <!-- Center: Wall Display -->
    <div class="wall-container">
      <canvas id="wallCanvas"></canvas>
      <div class="guest-cards-container" id="guestCardsContainer"></div>
    </div>

    <!-- Right Panel: Abby -->
    <div class="right-panel">
      <img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExaWRkNjg0cXdqemU4Y3F3c3loMnhjNmRyOHp3YWthdjRrbzBoZ3RmNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l0HlUJZE8Uo1cSlUI/giphy.gif"
           alt="Angry Abby"
           class="abby-angry">

      <div class="abby-message">
        "I'm not doing a pyramid right now and I'm very angry and disappointed"
      </div>

      <div class="current-team-info">
        <div class="current-team-name" id="currentTeamName">Loading...</div>
        <div class="current-team-category" id="currentTeamCategory">Category: --</div>
        <div class="current-team-score" id="currentTeamScore">--</div>
      </div>
    </div>
  </div>

  <script>
    // ============================================================================
    // STATE
    // ============================================================================

    let state = {
      teams: [],
      currentTeamIndex: 0,
      totalDancers: 0,
      isLoading: false,
      autoShuffleTimer: null,
      categorizedTeams: {
        topMatches: [],      // 4 teams
        needsWork: [],       // 4 teams
        notGreat: [],        // 4 teams
        worst: []            // 3 teams
      },
      teamsShown: [],
      crashOutCounter: 0,
      guestPositionsMap: {},
      canvas: null,
      ctx: null
    };

    const COLOR_PALETTE = [
      '#00ffff', '#ff00ff', '#00ff00', '#ff9900',
      '#ff0000', '#9d00ff', '#ffff00', '#0099ff',
      '#ff0099', '#00ff99', '#ff6600', '#00ffcc'
    ];

    // ============================================================================
    // INIT
    // ============================================================================

    window.addEventListener('load', function() {
      console.log('üé≠ Team Analytics Wall loading...');

      state.canvas = document.getElementById('wallCanvas');
      state.ctx = state.canvas.getContext('2d');

      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      loadTeams();
    });

    function resizeCanvas() {
      const container = state.canvas.parentElement;
      state.canvas.width = container.clientWidth;
      state.canvas.height = container.clientHeight;
    }

    function loadTeams() {
      if (state.isLoading) return;
      state.isLoading = true;

      console.log('üì° Loading teams and checked-in guests...');

      google.script.run
        .withSuccessHandler(handleTeamData)
        .withFailureHandler(handleError)
        .buildDanceTeams(15); // Generate 15 teams for categorization
    }

    function handleTeamData(data) {
      console.log('‚úÖ Teams loaded:', data);
      state.isLoading = false;

      if (data.minimumNotMet) {
        console.log('Not enough dancers');
        return;
      }

      if (data.error) {
        showError(data.error);
        return;
      }

      state.teams = data.teams || [];
      state.totalDancers = data.totalGuests || 0;

      document.getElementById('dancerCount').textContent = state.totalDancers + ' Dancers';

      if (state.teams.length > 0) {
        categorizeTeams();
        placeGuestCards(data.allGuests || []);
        updateRankingsDisplay();
        displayCurrentTeam();
        startAutoShuffle();
      } else {
        showError('No teams could be generated');
      }
    }

    function handleError(error) {
      console.error('‚ùå Error:', error);
      state.isLoading = false;
      showError('Error loading teams: ' + error.message);
    }

    // ============================================================================
    // TEAM CATEGORIZATION
    // ============================================================================

    function categorizeTeams() {
      // Sort teams by average similarity
      const sortedTeams = state.teams.map((team, index) => ({
        team: team,
        index: index,
        score: team.stats.avgSimilarity
      })).sort((a, b) => b.score - a.score);

      // Categorize (4, 4, 4, 3)
      state.categorizedTeams.topMatches = sortedTeams.slice(0, 4);
      state.categorizedTeams.needsWork = sortedTeams.slice(4, 8);
      state.categorizedTeams.notGreat = sortedTeams.slice(8, 12);
      state.categorizedTeams.worst = sortedTeams.slice(12, 15);

      console.log('üìä Teams categorized:');
      console.log('  Top Matches:', state.categorizedTeams.topMatches.length);
      console.log('  Needs Work:', state.categorizedTeams.needsWork.length);
      console.log('  Not Great:', state.categorizedTeams.notGreat.length);
      console.log('  Worst:', state.categorizedTeams.worst.length);
    }

    function getCategoryForTeam(teamIndex) {
      if (state.categorizedTeams.topMatches.some(t => t.index === teamIndex)) {
        return { name: 'TOP MATCHES', color: '#00ff00' };
      } else if (state.categorizedTeams.needsWork.some(t => t.index === teamIndex)) {
        return { name: 'NEEDS WORK', color: '#ffff00' };
      } else if (state.categorizedTeams.notGreat.some(t => t.index === teamIndex)) {
        return { name: 'NOT GREAT', color: '#ff9900' };
      } else if (state.categorizedTeams.worst.some(t => t.index === teamIndex)) {
        return { name: 'WORST', color: '#ff0000' };
      }
      return { name: 'UNKNOWN', color: '#ffffff' };
    }

    function updateRankingsDisplay() {
      // Top Matches
      const topContainer = document.getElementById('topRankings');
      topContainer.innerHTML = state.categorizedTeams.topMatches.map((item, idx) => `
        <div class="rank-item" data-index="${item.index}">
          <div class="rank-team-name">${escapeHtml(item.team.teamName)}</div>
          <div class="rank-score">${Math.round(item.score * 100)}%</div>
        </div>
      `).join('');

      // Needs Work
      const needsWorkContainer = document.getElementById('needsWorkRankings');
      needsWorkContainer.innerHTML = state.categorizedTeams.needsWork.map((item, idx) => `
        <div class="rank-item" data-index="${item.index}">
          <div class="rank-team-name">${escapeHtml(item.team.teamName)}</div>
          <div class="rank-score">${Math.round(item.score * 100)}%</div>
        </div>
      `).join('');

      // Not Great
      const notGreatContainer = document.getElementById('notGreatRankings');
      notGreatContainer.innerHTML = state.categorizedTeams.notGreat.map((item, idx) => `
        <div class="rank-item" data-index="${item.index}">
          <div class="rank-team-name">${escapeHtml(item.team.teamName)}</div>
          <div class="rank-score">${Math.round(item.score * 100)}%</div>
        </div>
      `).join('');

      // Worst
      const worstContainer = document.getElementById('worstRankings');
      worstContainer.innerHTML = state.categorizedTeams.worst.map((item, idx) => `
        <div class="rank-item" data-index="${item.index}">
          <div class="rank-team-name">${escapeHtml(item.team.teamName)}</div>
          <div class="rank-score">${Math.round(item.score * 100)}%</div>
        </div>
      `).join('');
    }

    function highlightCurrentTeamInRankings(teamIndex) {
      // Remove all active classes
      document.querySelectorAll('.rank-item').forEach(el => {
        el.classList.remove('active');
      });

      // Add active class to current team
      const current = document.querySelector(`.rank-item[data-index="${teamIndex}"]`);
      if (current) {
        current.classList.add('active');
      }
    }

    // ============================================================================
    // PLACE GUEST CARDS (FIXED POSITIONS)
    // ============================================================================

    function placeGuestCards(guests) {
      const container = document.getElementById('guestCardsContainer');
      container.innerHTML = '';

      const cw = 135, ch = 55, pad = 40;
      const minSpacing = 50;
      const positions = [];

      const canvasW = state.canvas.width;
      const canvasH = state.canvas.height;

      // Zone-based placement (same as Wall.html)
      const zoneRows = 10;
      const zoneCols = 10;
      const totalZones = zoneRows * zoneCols;

      const zoneWidth = (canvasW - pad * 2) / zoneCols;
      const zoneHeight = (canvasH - pad * 2) / zoneRows;

      const availableZones = [];
      for (let i = 0; i < totalZones; i++) {
        availableZones.push(i);
      }

      // Shuffle zones
      for (let i = availableZones.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [availableZones[i], availableZones[j]] = [availableZones[j], availableZones[i]];
      }

      guests.forEach((guest, index) => {
        let x, y;

        const zoneIndex = availableZones[index % availableZones.length];
        const zoneRow = Math.floor(zoneIndex / zoneCols);
        const zoneCol = zoneIndex % zoneCols;

        const zoneLeft = pad + zoneCol * zoneWidth;
        const zoneTop = pad + zoneRow * zoneHeight;

        let attempts = 0;
        let hasOverlap = true;

        while (hasOverlap && attempts < 50) {
          const maxOffsetX = Math.max(10, zoneWidth - cw - 10);
          const maxOffsetY = Math.max(10, zoneHeight - ch - 10);

          x = zoneLeft + Math.random() * maxOffsetX;
          y = zoneTop + Math.random() * maxOffsetY;

          hasOverlap = false;
          for (const pos of positions) {
            const dx = Math.abs(x - pos.x);
            const dy = Math.abs(y - pos.y);

            if (dx < (cw + minSpacing) && dy < (ch + minSpacing)) {
              hasOverlap = true;
              break;
            }
          }

          attempts++;
        }

        if (hasOverlap) {
          x = zoneLeft + (zoneWidth - cw) / 2 + (Math.random() - 0.5) * 10;
          y = zoneTop + (zoneHeight - ch) / 2 + (Math.random() - 0.5) * 10;
        }

        x = Math.max(pad, Math.min(x, canvasW - cw - pad));
        y = Math.max(pad, Math.min(y, canvasH - ch - pad));

        positions.push({x, y});
        state.guestPositionsMap[guest.uid] = {x: x + cw/2, y: y + ch/2};

        const card = document.createElement('div');
        card.className = 'guest-card';
        card.setAttribute('data-uid', guest.uid);
        card.style.left = x + 'px';
        card.style.top = y + 'px';
        card.innerHTML = `
          <div class="guest-uid">${guest.uid}</div>
          <div class="guest-screen-name">${escapeHtml(guest.screenName)}</div>
        `;
        container.appendChild(card);
      });

      console.log(`üìç Placed ${guests.length} cards in fixed positions`);
    }

    // ============================================================================
    // AUTO-SHUFFLE
    // ============================================================================

    function startAutoShuffle() {
      if (state.autoShuffleTimer) {
        clearInterval(state.autoShuffleTimer);
      }

      // Slower shuffle: 10 seconds per team
      state.autoShuffleTimer = setInterval(() => {
        performShuffle();
      }, 10000);

      console.log('üé∞ Auto-shuffle started (10s interval)');
    }

    function performShuffle() {
      console.log('üé∞ Shuffling to next team...');

      // Clear canvas
      clearCanvas();

      // Move to next team
      if (state.currentTeamIndex < state.teams.length - 1) {
        state.currentTeamIndex++;
      } else {
        state.currentTeamIndex = 0;
      }

      displayCurrentTeam();

      // Check for crash out after 15 teams
      checkForCrashOut();
    }

    // ============================================================================
    // DISPLAY CURRENT TEAM
    // ============================================================================

    function displayCurrentTeam() {
      if (state.teams.length === 0) return;

      const team = state.teams[state.currentTeamIndex];

      // Update counter
      document.getElementById('teamCounter').textContent =
        'Team ' + (state.currentTeamIndex + 1) + ' of ' + state.teams.length;

      // Get category
      const category = getCategoryForTeam(state.currentTeamIndex);

      // Update category display
      document.getElementById('categoryDisplay').textContent = category.name;

      // Update right panel
      document.getElementById('currentTeamName').textContent = team.teamName;
      document.getElementById('currentTeamCategory').textContent = 'Category: ' + category.name;
      document.getElementById('currentTeamScore').textContent =
        Math.round(team.stats.avgSimilarity * 100) + '%';

      // Highlight in rankings
      highlightCurrentTeamInRankings(state.currentTeamIndex);

      // Highlight team members on wall
      highlightTeamMembers(team);

      // Draw connection lines between team members
      drawTeamConnections(team, category.color);
    }

    function highlightTeamMembers(team) {
      // Remove all team-member classes
      document.querySelectorAll('.guest-card').forEach(card => {
        card.classList.remove('team-member');
      });

      // Get all team member UIDs
      const memberUIDs = [
        team.focal.uid,
        ...team.row2.map(m => m.uid),
        ...team.row3.map(m => m.uid)
      ];

      // Highlight team members
      memberUIDs.forEach(uid => {
        const card = document.querySelector(`.guest-card[data-uid="${uid}"]`);
        if (card) {
          card.classList.add('team-member');
        }
      });
    }

    function drawTeamConnections(team, color) {
      // Get all team member UIDs
      const memberUIDs = [
        team.focal.uid,
        ...team.row2.map(m => m.uid),
        ...team.row3.map(m => m.uid)
      ];

      // Get positions
      const positions = memberUIDs.map(uid => state.guestPositionsMap[uid]).filter(p => p);

      if (positions.length < 2) return;

      // Draw lines connecting all members
      state.ctx.strokeStyle = color;
      state.ctx.lineWidth = 2;
      state.ctx.shadowBlur = 15;
      state.ctx.shadowColor = color;

      // Connect each member to all others
      for (let i = 0; i < positions.length; i++) {
        for (let j = i + 1; j < positions.length; j++) {
          drawLine(positions[i], positions[j], color);
        }
      }
    }

    function drawLine(start, end, color) {
      state.ctx.strokeStyle = color;
      state.ctx.lineWidth = 2;
      state.ctx.shadowBlur = 15;
      state.ctx.shadowColor = color;

      state.ctx.beginPath();
      state.ctx.moveTo(start.x, start.y);
      state.ctx.lineTo(end.x, end.y);
      state.ctx.stroke();
    }

    function clearCanvas() {
      state.ctx.clearRect(0, 0, state.canvas.width, state.canvas.height);
    }

    // ============================================================================
    // CRASH OUT SEQUENCE
    // ============================================================================

    function checkForCrashOut() {
      const currentTeam = state.teams[state.currentTeamIndex];

      state.teamsShown.push({
        index: state.currentTeamIndex,
        teamName: currentTeam.teamName,
        score: currentTeam.stats.avgSimilarity
      });

      state.crashOutCounter++;
      console.log('üìä Teams shown: ' + state.crashOutCounter + '/15');

      if (state.crashOutCounter >= 15) {
        console.log('üí• 15 teams shown! Finding worst team...');

        // Find worst team from last 15 shown
        const worstTeam = state.teamsShown.reduce((worst, current) =>
          current.score < worst.score ? current : worst
        );

        console.log('üí• Worst team: ' + worstTeam.teamName + ' (' + Math.round(worstTeam.score * 100) + '%)');

        setTimeout(() => {
          triggerCrashOut(worstTeam);
        }, 1000);
      }
    }

    function triggerCrashOut(worstTeam) {
      if (state.autoShuffleTimer) {
        clearInterval(state.autoShuffleTimer);
      }

      const overlay = document.createElement('div');
      overlay.className = 'crash-overlay';
      overlay.innerHTML = `
        <div class="crash-message">ABBY LEE CRASH OUT!</div>
        <div class="crash-video">
          <iframe
            width="560"
            height="315"
            src="https://www.youtube.com/embed/2Z2lWudxVXQ?autoplay=1"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen>
          </iframe>
        </div>
        <div class="crash-subtext">
          You caused Abby Lee to crash out...<br>
          <strong>${escapeHtml(worstTeam.teamName)}</strong> was the WORST team!
        </div>
      `;

      document.body.appendChild(overlay);

      setTimeout(() => {
        document.body.removeChild(overlay);

        state.crashOutCounter = 0;
        state.teamsShown = [];

        state.currentTeamIndex = 0;
        clearCanvas();
        displayCurrentTeam();

        startAutoShuffle();
      }, 10000);
    }

    // ============================================================================
    // HELPERS
    // ============================================================================

    function showError(message) {
      console.error('Error:', message);
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text || '';
      return div.innerHTML;
    }
  </script>
</body>
</html>
